//
// Item language to define data structures
// ---------------------------------------
// Item definitions (Struct) are stored in Packages.
// Items have attributes which reference RawTypes (e.g. int, float, etc.) or other Structs as type.
// RawTypes are mapped to concrete language specific types.
// Arrays may have fixed size or variable size (defined by other attributes).
// Arrays may have multiple dimensions.

Model:
    imports+=Import*
    packages+=Package+
;
Package:
    ("package"|"item_package") name=ID "{"
    (target_namespace=TargetNamespace)?
    (
    packages+=Package
    |
    structs+=Struct
    |
    types+=Type
    )*
    "}"
;

TargetNamespace:
    "target_namespace" name=STRING
;
Type: RawType|Struct;
RawType:
    "type" name=ID "{"
        (cpptype = CppType)?
        (pythontype = PythonType)?
        (pythonconstructtype = PythonConstructType)?
    "}"
;
CppType:
    "C++" ":" type=STRING ("including" including=STRING)?
;
PythonType:
    "python" ":" type=STRING ("from" fromlib=STRING)? "with" "format" format=STRING
;
PythonConstructType:
    "python-construct" ":" type=STRING?
;
Struct:
    "struct" name=ID "{"
    attributes+=Attribute*
    "}"
;
Attribute: ScalarAttribute|ArrayAttribute;

ScalarAttribute:
    "scalar" name=ID ":" type=[Type|FQN] (
        "{"
        ("default" "=" default_value=STRING)?
        "}"
    )?
;
ArrayAttribute:
    "array" name=ID ":" type=[Type|FQN] ("[" array_dimensions+=ArrayDimension "]")+
;
ArrayDimension:
    array_size=Sum
    (":" array_index_name=ID)?
;

Sum:
    (parts+=Dif ( "+" parts+=Dif )*)
;
Dif:
    (parts+=Mul ( "-" parts+=Mul )*)
;
Mul:
    (parts+=Div ( "*" parts+=Div )*)
;
Div:
    (parts+=Val ( "/" parts+=Val)*)
;
Val:
    value=UINT | ref=ScalarRef | "(" sum=Sum ")"
;

ScalarRef:
    ref0=[ScalarAttribute] ("." ref1=[ScalarAttribute] ("." ref2=[ScalarAttribute] )?)?
;

Import:
    "import" importURI=STRING
;
FQN: ID("." ID)*;
UINT: /\d+/ ;
Comment: /\/\/.*$/;
