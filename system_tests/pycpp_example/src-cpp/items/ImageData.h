// Autogenerated from cpp_header.template file
#include "attributes/attributes.h"
#include <cstdint>
#include <cstdint>

namespace items {


class ImageData {
public:
    // =======================================================
    // Meta Data
    // =======================================================
    /** Meta info for attributes of ImageData */
    struct AttributeMetaInfos {
        /** Meta info for ImageData::h */
        struct h {
            static constexpr const char* name() { return "h"; }
            static constexpr const char* type_name() { return "UINT32"; }
        };
        /** Meta info for ImageData::w */
        struct w {
            static constexpr const char* name() { return "w"; }
            static constexpr const char* type_name() { return "UINT32"; }
        };
        /** Meta info for ImageData::data_ui8 */
        struct data_ui8 {
            static constexpr const char* name() { return "data_ui8"; }
            static constexpr const char* type_name() { return "UINT8"; }
        };
    };
    /** Meta info for ImageData */
    struct MetaInfo {
        static constexpr const char* type_name() { return "ImageData"; }
    };
    void init(
        const uint32_t &p_h ,
        const uint32_t &p_w 
    ) {
        this->h = p_h;
        this->w = p_w;
        data_ui8.adjust_size();
    }

    // =======================================================
    // Data
    // =======================================================
    /** scalar attribute h -- affects size: True */
    attributes::ReadOnlyAttribute<AttributeMetaInfos::h, uint32_t, ImageData> h = 200;
    /** scalar attribute w -- affects size: True */
    attributes::ReadOnlyAttribute<AttributeMetaInfos::w, uint32_t, ImageData> w = 320;
    /** array attribute data_ui8 -- fixed size: False
      * dimensions:
      * - height
      * - width
      */
    attributes::DynamicArrayAttribute<AttributeMetaInfos::data_ui8, uint8_t, ImageData, 2> data_ui8 = { {
        [this](){ return h.value(); } ,
        [this](){ return w.value(); } 
    } };

    // =======================================================
    // Visitor stuff
    // =======================================================
    /**
     * const visitor
     * @param visitor
     */
    template<class Visitor>
    void accept(Visitor &visitor) const {
        visitor.template visitRawTypeScalar<AttributeMetaInfos::h>( *this, h.value() );
        visitor.template visitRawTypeScalar<AttributeMetaInfos::w>( *this, w.value() );
        visitor.template visitRawTypeArray<AttributeMetaInfos::data_ui8>( *this, data_ui8.value() );
    }
    /**
     * init visitor
     * @param visitor
     */
    template<class Visitor>
    void accept_and_init(Visitor &visitor) {
        visitor.template visitRawTypeScalar<AttributeMetaInfos::h>( *this, h.value() );
        visitor.template visitRawTypeScalar<AttributeMetaInfos::w>( *this, w.value() );
        data_ui8.adjust_size();
        visitor.template visitRawTypeArray<AttributeMetaInfos::data_ui8>( *this, data_ui8.value() );
    }

};

} // namespace items

