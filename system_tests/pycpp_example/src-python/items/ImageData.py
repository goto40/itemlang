# Autogenerated from python.template file
from attributes.attributes import ReadOnlyAttribute, Attribute, DynamicArrayAttribute, BaseStruct
import numpy # UINT8
import numpy # UINT32

class ImageData(BaseStruct):
    def __init__(self, read_only=False):
        super(ImageData, self).__init__()
        # scalar attribute h -- affects size: True
        self.__dict__["h"] = ReadOnlyAttribute( numpy.uint32, 200, {'model_type_name': 'UINT32', 'format': 'L'} )
        # scalar attribute w -- affects size: True
        self.__dict__["w"] = ReadOnlyAttribute( numpy.uint32, 320, {'model_type_name': 'UINT32', 'format': 'L'} )
        # array attribute data_ui8 -- fixed size: False
        #    dimensions:
        #    - height
        #    - width
        self.__dict__["data_ui8"] = DynamicArrayAttribute( numpy.uint8, [
            lambda: self.h ,
            lambda: self.w 
        ], {'model_type_name': 'UINT8', 'format': 'B'})

    def init( self,
        p_h ,
        p_w 
    ):
        self._set_value("h", p_h)
        self._set_value("w", p_w)
        self.__dict__["data_ui8"]._adjust_size();

    def accept( self, visitor ):
        visitor.visitRawTypeScalar( self, "h", self.__dict__["h"]._meta_info );
        visitor.visitRawTypeScalar( self, "w", self.__dict__["w"]._meta_info );
        visitor.visitRawTypeArray( self, "data_ui8", self.__dict__["data_ui8"]._meta_info );

    def accept_and_init( self, visitor ):
        visitor.visitRawTypeScalar( self, "h", self.__dict__["h"]._meta_info );
        visitor.visitRawTypeScalar( self, "w", self.__dict__["w"]._meta_info );
        self.__dict__["data_ui8"]._adjust_size();
        visitor.visitRawTypeArray( self, "data_ui8", self.__dict__["data_ui8"]._meta_info );
